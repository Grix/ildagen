<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 2;

layer_list = ds_list_create();
layer = ds_list_create();
ds_list_add(layer_list,layer);
surface_list = ds_list_create();
audio_list = ds_list_create();
audio_surf = surface_create(1024,1024);
effect_list = ds_list_create();
ilda_list = ds_list_create();
audio_surf = surface_create(1024,1024);
buffer_list = ds_list_create();

temp_dir = working_directory+"tempproject/"
if (os_version != -1)
    {
    if (FS_directory_exists(working_directory+"tempproject"))
        FS_directory_delete(working_directory+"tempproject");
    FS_directory_create(temp_dir);
    if !FS_directory_exists(temp_dir)
        {
        show_message_async("Error: Could not write to temporary directory. The program may not function correctly.");
        }
    }

selectedlayer = -1;
selectedx = 0;
song = 0;
songlength = 0;
length = 30*30;
projectfps = 30;
tooltip = "";
tlpos = 0;
parsingaudio = 0;
scrollbarx = 0;
scrollbarw = 0;
layerbarx = 0;
layerbarw = 0;
scroll_moving = 0;
playbackspeed = 1;
songinstance = 0;
getint = -1;
getstr = -1;
dialog = "";
drawcursorx = 0;
drawcursory = 0;

tlw = 897;
tlh = 128;
tls = tlh+138+16;
lbh = room_height-32-tlh-138;
phi = 1.618;
tlzoom = tlw;
tlx = 0;
tly = 0;
tlhalf = tlh/2;
tlthird = tlh/3;

playing = 0;
pos = 0;
deltatime = 0;

LoadFMOD();
FMODinit(2,0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 2;

//if (room != rm_seq) exit;
//if (parsingaudio) or (scroll_moving) or (song &amp;&amp; !FMODInstanceGetPaused(songinstance))
//refresh_audio_surf();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> if (parsingaudio == 1) refresh_audio();

if (room != rm_seq) exit;

if (song) FMODUpdate();

if (playing == 1)
    {
    tlpos += delta_time/1000*playbackspeed;
    if (song)
        FMODInstanceSetPaused(songinstance,0);    
    if (tlpos &gt; length/projectfps*1000) 
        {
        playing = 0;
        tlpos = 0;
        if (song)
            {
            FMODInstanceStop(songinstance);
            songinstance = FMODSoundPlay(song,1);
            set_audio_speed();
            }
        }
    if (scroll_moving != 1) &amp;&amp; (song) &amp;&amp; (abs(FMODInstanceGetPosition(songinstance)*FMODSoundGetLength(song)-tlpos) &gt; 17)
        tlpos = FMODInstanceGetPosition(songinstance)*FMODSoundGetLength(song);

    }
else
    {
    if (song)
        FMODInstanceSetPaused(songinstance,1);
    }

with (obj_cursor)
    {
    x = mouse_x;
    y = mouse_y;
    }

if (keyboard_check_pressed(vk_tab))
    {
    if (song) FMODInstanceSetPaused(songinstance,1);
    playing = 0;
    room_goto(rm_ilda);
    }
    
if (keyboard_check_pressed(vk_backspace))
    {
    tlx = 0;
    playing = 0;
    tlpos = 0;
    if (song)
        {
        FMODInstanceStop(songinstance);
        songinstance = FMODSoundPlay(song,1);
        set_audio_speed();
        }
    }
    
    
handle_scrolling();

if (keyboard_check_released(vk_f11))
    window_set_fullscreen(!window_get_fullscreen())
    
if (keyboard_check_pressed(ord('M')))
    {
    window_set_fullscreen(0);
    window_set_size(1100,670);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get integer
var new_id = ds_map_find_value(async_load, "id");
if (new_id == getint)
    {
    if (dialog == "layerdelete")
        {
        layer = layertodelete;
        if (ds_list_find_index(layer_list,layer) == selectedlayer)
            selectedlayer = -1;
        for (j = 0; j &lt; ds_list_size(layer); j++)
            ds_list_destroy(ds_list_find_value(layer,j));
        ds_list_delete(layer_list,ds_list_find_index(layer_list,layertodelete));
        ds_list_destroy(layer);
        }        

    if ds_map_find_value(async_load, "status")
       {
      switch (dialog)
          {
          case "fps":
            {
            projectfps = clamp(ds_map_find_value(async_load, "value"),1,999);
            controller.projectfps = projectfps;
            
            break;
            }
          case "loadfile":
            {
            load_project(get_open_filename_ext("ildaGen project|*.igp","","","Select ildaGen project file"));
          
            break;
            }
          }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_seq) refresh_audio_surf();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//to free the system
FMODfree();
UnloadFMOD();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rm_seq) exit;

if (alarm[0] == 1)
    {
    refresh_audio_surf();
    }
    
draw_set_color(c_white);
draw_set_alpha(1);
if (surface_exists(audio_surf))
    draw_surface_part(audio_surf,0,0,tlw,room_height,0,137);
    
draw_set_color(c_black);
draw_set_alpha(0.8);
cursorlinex = tlpos/1000*projectfps;
cursorlinexdraw = (cursorlinex-tlx)/tlzoom*tlw;
if (cursorlinexdraw == clamp(cursorlinexdraw,0,tlw))
    {
    draw_set_color(c_black);
    draw_set_alpha(0.8);
    draw_line(cursorlinexdraw,136,cursorlinexdraw,136+tlh);
    draw_line(cursorlinexdraw,tls,cursorlinexdraw,room_height-16);
    if (cursorlinexdraw &gt; (tlw/2)) &amp;&amp; (playing) &amp;&amp; (!scroll_moving)
        {
        tlx = cursorlinex-(tlw/2)*tlzoom/tlw;
            if ((tlx+tlzoom) &gt; length) length = tlx+tlzoom;
        }
    }

if (selectedlayer != -1)
    {
    drawcursorxcorrected = (selectedx-tlx)/tlzoom*tlw;
    drawcursorycorrected = tls+selectedlayer*48-layerbarx;
    if (drawcursorxcorrected == clamp(drawcursorxcorrected,0,tlw))
        draw_line(drawcursorxcorrected,drawcursorycorrected,drawcursorxcorrected,drawcursorycorrected+48);
    }
draw_set_alpha(0.4);
if (draw_cursorline = 1)
    {
    floatingcursorxcorrected = (floatingcursorx-tlx)/tlzoom*tlw;
    draw_line(floatingcursorxcorrected,floatingcursory,floatingcursorxcorrected,floatingcursory+48);
    }
    
//scroll
draw_set_alpha(1);
draw_line(0,room_height-16,tlw,room_height-16);
draw_line(tlw-17,tls,tlw-17,room_height);
draw_rectangle_colour(scrollbarx,room_height,scrollbarx+scrollbarw,room_height-16,c_ltgray,c_ltgray,c_gray,c_gray,0);
draw_rectangle_colour(tlw-16,tls+(layerbarx*layerbarw/lbh),tlw,tls+(layerbarx*layerbarw/lbh)+layerbarw,c_ltgray,c_gray,c_gray,c_ltgray,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rm_seq) exit;

playing = !playing;

//FMODInstanceSetPaused(songinstance,!FMODInstanceGetPaused(songinstance));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
