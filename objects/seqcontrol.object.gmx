<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 2;
alarm[4] = 600;

layer_list = ds_list_create();
layer = ds_list_create();
ds_list_add(layer_list,layer);
ds_list_add(layer,ds_list_create()); //envelope list
surface_list = ds_list_create();
somaster_list = ds_list_create();
somoving_list = ds_list_create();
undo_list = ds_list_create();
audio_list = ds_list_create();
effect_list = ds_list_create();
ilda_list = ds_list_create();
buffer_list = ds_list_create();
marker_list = ds_list_create();
audio_surf = surface_create(1024,1024);
audio_surf = surface_create(1024,1024);
frame_surf = surface_create(512,512);
frame3d_surf = surface_create(512,512);
frame_surf_large = surface_create(1024,1024);
frame3d_surf_large = surface_create(1024,1024);
copy_list = ds_list_create();
copy_buffer = ds_list_create();
env_type_map = ds_map_create();
dac_active_list = ds_map_create();
projector_list = ds_list_create();
output_buffer = -1;
blank_frame = buffer_create(8, buffer_fixed, 1);
    
output_buffer_ready = false;
output_buffer_next_size = 0;
laseronfirst = false;
frame_surf_refresh = 0;
image_speed = 0;
draw_mouseline = 0;
fastload = 1;
draw_cursorline = 0;
doubleclick = 0;    
frameprev = -1;
viewmode = 1;
selectedlayer = 0;
selectedx = 0;
song = 0;
songlength = 0;
volume = 100;
length = 1100;
projectfps = 30;
tooltip = "";
tlpos = 0;
parsingaudio = 0;
scrollbarx = 0;
scrollbarw = 0;
layerbarx = 0;
layerbarw = 0;
scroll_moving = 0;
playbackspeed = 1;
songinstance = 0;
getint = -1;
getstr = -1;
dialog = "";
drawcursorx = 0;
drawcursory = 0;
moving_object = 0;
moving_object_flag = 0;
audioshift = 0;
ypos_perm = 48;

startframe = 0;
endframe = 900;
startframex = -1;
endframex = -1;
largepreview = 0;

tlw = 897;
tlh = 128;
tls = tlh+138+16; //start of layer area, seen from outside surface
lbh = 670-32-tlh-138;
lbsh = tlh+16+lbh; //start of bottom scrollbar
phi = 1.618;
tlzoom = tlw;
tlx = 0;
tly = 0;
tlhalf = tlh/2;
tlthird = tlh/3;

c_gold = make_colour_rgb(255,220,0);

playing = 0;
pos = 0;
deltatime = 0;

ds_map_add(env_type_map,"x","X");
ds_map_add(env_type_map,"y","Y");
ds_map_add(env_type_map,"size","Size");
ds_map_add(env_type_map,"rotabs","Rotation");
ds_map_add(env_type_map,"a","Intensity");
ds_map_add(env_type_map,"hue","Hue");
ds_map_add(env_type_map,"r","Red");
ds_map_add(env_type_map,"g","Green");
ds_map_add(env_type_map,"b","Blue");

LoadFMOD();
benchmark();

draw_set_font(fnt_tooltip);
menu_string = "   File      Properties      Edit      Tools      View      Settings      About   ";
menu_width_start[0] = 0;
menu_width[0] = string_width("   File   ");
menu_width_start[1] = menu_width[0];
menu_width[1] = string_width("   Properties   ");
menu_width_start[2] = menu_width_start[1]+menu_width[1];
menu_width[2] = string_width("   Edit   ");
menu_width_start[3] = menu_width_start[2]+menu_width[2];
menu_width[3] = string_width("   Tools   ");
menu_width_start[4] = menu_width_start[3]+menu_width[3];
menu_width[4] = string_width("   View   ");
menu_width_start[5] = menu_width_start[4]+menu_width[4];
menu_width[5] = string_width("   Settings   ");
menu_width_start[6] = menu_width_start[5]+menu_width[5];
menu_width[6] = string_width("   About   ");
menu_width_start[7] = menu_width_start[6]+menu_width[6];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean undo

alarm[4] = 1200;

while (ds_list_size(undo_list) &gt; 20)
    {
    show_debug_message("cleaning undo list");
    undo = ds_list_find_value(undo_list,0);
    ds_list_delete(undo_list,0);

    if (string_char_at(undo,0) == 'c')
        {
        //undo create object (delete)
        undolisttemp = real(string_digits(undo));
        if (!ds_exists(undolisttemp,ds_type_list))
            exit;
        ds_list_destroy(undolisttemp);
        }
    if (string_char_at(undo,0) == 'd')
        {
        //undo delete object
        undolisttemp = real(string_digits(undo));
        if (!ds_exists(undolisttemp,ds_type_list))
            exit;
        objectlist = ds_list_find_value(undolisttemp,1);
        infolist = ds_list_find_value(objectlist, 2);
        if (surface_exists(ds_list_find_value(infolist,1)))
            surface_free(ds_list_find_value(infolist,1));
        //if buffer exists
            buffer_delete(ds_list_find_value(objectlist,1));
        ds_list_destroy(infolist);
        ds_list_destroy(objectlist);
        ds_list_destroy(undolisttemp);
        }
    else if (string_char_at(undo,0) == 'r')
        {
        //undo resize object
        undolisttemp = real(string_digits(undo));
        if (!ds_exists(undolisttemp,ds_type_list))
            exit;
        ds_list_destroy(undolisttemp);
        }
    else if (string_char_at(undo,0) == 'm')
        {
        //undo move object
        undolisttemp = real(string_digits(undo));
        if (!ds_exists(undolisttemp,ds_type_list))
            exit;
        ds_list_destroy(undolisttemp);
        }
    else if (string_char_at(undo,0) == 'l')
        {
        //undo marker clear
        undolisttemp = real(string_digits(undo));
        if (!ds_exists(undolisttemp,ds_type_list))
            exit;
        ds_list_destroy(undolisttemp);
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>doubleclick = 1;
alarm[1] = 13;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>doubleclick = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 5;

//if (room != rm_seq) exit;
//if (parsingaudio) or (scroll_moving) or (song &amp;&amp; !FMODInstanceGetPaused(songinstance))
//refresh_audio_surf();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_loading)
    {
    if (global.loading_exportproject == 1)
        export_project_work();
    else if (global.loading_saveproject == 1)
        save_project_work();
    else if (global.loading_loadproject == 1)
        load_project_work();
    else if (global.loading_importildaseq == 1)
        {
        
        if (global.loading_current &lt; global.loading_end)
            read_ilda_work();
        else
            import_ildaseq_end();
        }
    }

if (parsingaudio == 1) refresh_audio();

if (song) FMODUpdate();

if (room != rm_seq) exit;
    
if (controller.dialog_open) exit;
if (instance_exists(oDropDown))
    exit;
    
if (keyboard_check(vk_control))
    {
    //CTRL+~
    if (keyboard_check_pressed(ord('C')))
        {
        if (!ds_list_empty(somaster_list))
            {
            //COPY
            seq_copy_object();
            }
        }
    else if (keyboard_check_pressed(ord('X')))
        {
        if (!ds_list_empty(somaster_list))
            {
            //COPY
            seq_cut_object();
            }
        }
    else if (keyboard_check_pressed(ord('V')))
        {
        if (selectedlayer &gt;= 0) and (selectedx &gt;= 0)
            {
            //COPY
            seq_paste_object();
            }
        }
    else if (keyboard_check_pressed(ord('Z')))
        {
        undo_seq();
        }
    }
else if (keyboard_check_pressed(vk_right))
    {
    tlpos += 1000/projectfps;
    }
    
else if (keyboard_check_pressed(vk_space))
    {
    playing = !playing;
    if (seqcontrol.song)
        {
        if (playing)
            {
            FMODInstanceSetPosition(songinstance,(tlpos+audioshift)/FMODSoundGetLength(song));
            FMODInstanceSetPaused(songinstance,0);
            }
        else
            FMODInstanceSetPaused(songinstance,1);
        }
    }
    
else if (keyboard_check_pressed(vk_left)) and (tlpos &gt; projectfps/1000)
    {
    tlpos -= 1000/projectfps;
    }


else if (keyboard_check_pressed(vk_tab))
    {
    if (song) FMODInstanceSetPaused(songinstance,1);
    playing = 0;
    room_goto(rm_ilda);
    }
    
else if (keyboard_check_pressed(ord("P")))
    {
    viewmode++;
    if (viewmode &gt; 2)
        viewmode = 0;
    frame_surf_refresh = 1;
    }
    
else if (keyboard_check_pressed(ord("0")))
    {
    tlx = 0;
    playing = 0;
    tlpos = 0;
    if (song)
        {
        FMODInstanceStop(songinstance);
        songinstance = FMODSoundPlay(song,1);
        set_audio_speed();
        }
    }

else if (keyboard_check_pressed(vk_delete))
    {
    if (!ds_list_empty(somaster_list))
        {
        seq_delete_object();
        }
    }
    
else if (keyboard_check_released(vk_f11))
    window_set_fullscreen(!window_get_fullscreen())
    
else if (keyboard_check_pressed(ord('M')))
    {
    window_set_fullscreen(0);
    window_set_size(1100,693);
    }   
    
handle_mousecontrol();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///timing and laser output
if (room != rm_seq) exit;

if (playing == 1)
    {
    tlpos += delta_time/1000*playbackspeed;
    if (tlpos &gt; length/projectfps*1000) 
        {
        playing = 0;
        tlpos = 0;
        if (song)
            {
            FMODInstanceStop(songinstance);
            songinstance = FMODSoundPlay(song,1);
            set_audio_speed();
            }
        }
    if (abs(FMODInstanceGetPosition(songinstance)*FMODSoundGetLength(song)-(tlpos+audioshift)) &gt; 32) and (scroll_moving != 1) and (song)
        {
        FMODInstanceSetPosition(songinstance,(tlpos+audioshift)/FMODSoundGetLength(song));
        }
    }

if (frameprev != round(tlpos/1000*projectfps))
    {
    frame_surf_refresh = 1;
    frameprev = round(tlpos/1000*projectfps);
    }
    
if (controller.laseron)
{
    if (!ds_exists(controller.dac,ds_type_list))
    {
        show_message_async("Error, DAC data missing");
        controller.laseron = false;
        controller.dac = -1;
        controller.dac_string = "[None]";
    }
    else
        output_frame_seq();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rm_seq) exit;

alarm[2] = 1;

//menu
if (mouse_y &gt; view_yview[3])   
    {
    if (mouse_x &gt; menu_width_start[0]) and (mouse_x &lt; menu_width_start[1])
        {
        dropdown_menu_seq_file();
        }
    else if (mouse_x &gt; menu_width_start[1]) and (mouse_x &lt; menu_width_start[2])
        {
        dropdown_menu_seq_properties();
        }
    else if (mouse_x &gt; menu_width_start[2]) and (mouse_x &lt; menu_width_start[3])
        {
        dropdown_menu_seq_edit();
        }
    else if (mouse_x &gt; menu_width_start[3]) and (mouse_x &lt; menu_width_start[4])
        {
        dropdown_menu_seq_tools();
        }
    else if (mouse_x &gt; menu_width_start[4]) and (mouse_x &lt; menu_width_start[5])
        {
        dropdown_menu_ilda_view();
        }
    else if (mouse_x &gt; menu_width_start[5]) and (mouse_x &lt; menu_width_start[6])
        {
        dropdown_menu_seq_settings();
        }
    else if (mouse_x &gt; menu_width_start[6]) and (mouse_x &lt; menu_width_start[7])
        {
        dropdown_menu_ilda_about();
        }
    exit;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get integer
new_id = ds_map_find_value(async_load, "id");
controller.dialog_open = 0;
if (new_id == getint)
    { 
    if ds_map_find_value(async_load, "status")
       {
      switch (dialog)
          {
          case "objectduration":
            {
            if ds_list_empty(somaster_list)
                exit;
            
            objectlist = ds_list_find_value(somaster_list,0);
            infolisttomove = ds_list_find_value(objectlist,2);
            newduration = round(ds_map_find_value(async_load, "value"));
            if (newduration &lt; 1) newduration = 1;
            newduration--;
            
            ds_list_replace(infolisttomove,0,newduration);
            
            //todo: check for collisions
            
            /*if (ds_exists(undolisttemp,ds_type_list))
                {
                ds_list_add(undo_list,"r"+string(undolisttemp));
                }*/
            
            break;
            }
          case "fps":
            {
            projectfps = clamp(ds_map_find_value(async_load, "value"),1,999);
            controller.projectfps = projectfps;
            room_speed = projectfps;
            while (room_speed &lt; 60)
                room_speed += projectfps;
            break;
            }
          case "audioshift":
            {
            audioshift = ds_map_find_value(async_load, "value");
            obj_audioshift.stringToDraw = "Offset: "+string_format(seqcontrol.audioshift,4,1)+"ms";
            
            break;
            }
          case "projectclear":
            {
            if (ds_map_find_value(async_load, "value"))
                clear_project();
            
            break;
            }
          case "loadproject":
            {
            load_project(get_open_filename_ext("LasershowGen project|*.igp","","","Select LasershowGen project file"));
          
            break;
            }
          
          case "fromseq":
            {
            frames_fromseq();
            
            break;
            }
            
          case "envelopedelete":
            {
            selectedenvelope_index = ds_list_find_index(env_list_to_delete,selectedenvelope);
            if (selectedenvelope_index == -1) 
                exit;
            
            ds_list_destroy(ds_list_find_value(selectedenvelope,1));
            ds_list_destroy(ds_list_find_value(selectedenvelope,2));
            ds_list_destroy(selectedenvelope);
            ds_list_delete(env_list_to_delete,selectedenvelope_index);
            
            break;
            }
            
          case "layerdelete":
            {
            layer = layertodelete;
            selectedlayer = ds_list_find_index(layer_list,layer);
            if (selectedlayer == -1)
                exit;
            num_objects = ds_list_size(layer)-1;
            ds_list_clear(somaster_list);
            repeat (num_objects)   
                {
                ds_list_add(somaster_list,ds_list_find_value(layer,1));
                seq_delete_object_noundo();
                }
            envelope_list = ds_list_find_value(layer,0);
            num_objects = ds_list_size(envelope_list);
            repeat (num_objects)   
                {
                envelope = ds_list_find_value(envelope_list,0);
                ds_list_destroy(ds_list_find_value(envelope,1));
                ds_list_destroy(ds_list_find_value(envelope,2));
                ds_list_destroy(envelope);
                ds_list_delete(envelope_list,0);
                }
            ds_list_destroy(envelope_list);
            ds_list_destroy(layer);
            ds_list_delete(layer_list,selectedlayer);
            
            selectedlayer = 0;
            selectedx = 0;
            
            break;
            }  
          }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_seq) 
    {
    frame_surf_refresh = 1;
    laseronfirst = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//to free the system
FMODfree();
UnloadFMOD();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rm_seq) exit;

if ((alarm[0] == 1)) or (playing and (alarm[0] mod 2) == 1) or (moving_object) or (moving_object_flag) or (scroll_moving)
    {
    refresh_audio_surf();
    }
    
draw_set_color(c_white);
draw_set_alpha(1);
    
//draws laser preview
if (frame_surf_refresh == 1) or !surface_exists(frame_surf) or !surface_exists(frame_surf_large) or !surface_exists(frame3d_surf_large) or !surface_exists(frame3d_surf)
    {
    if (largepreview)
        refresh_seq_surface_large();
    else
        refresh_seq_surface();
        
    frame_surf_refresh = 0;
    }
    
if (surface_exists(audio_surf))
    draw_surface_part(audio_surf,0,0,tlw+1,lbsh+17,0,137);
    
draw_enable_alphablend(0);
with (obj_button_parent)
    draw_self();
draw_enable_alphablend(1);
    
draw_set_color(c_black);
draw_set_alpha(0.8);
cursorlinex = tlpos/1000*projectfps;
cursorlinexdraw = (cursorlinex-tlx)/tlzoom*tlw;
if (cursorlinexdraw == clamp(cursorlinexdraw,0,tlw))
    {
    //timeline cursor
    draw_line(cursorlinexdraw,136,cursorlinexdraw,136+tlh);
    draw_line(cursorlinexdraw,tls-1,cursorlinexdraw,lbsh+137);
    if (cursorlinexdraw &gt; (tlw/2)) and (playing) and (!scroll_moving) and (!mouse_check_button(mb_any))
        {
        tlx = cursorlinex-(tlw/2)*tlzoom/tlw;
            if ((tlx+tlzoom) &gt; length) length = tlx+tlzoom;
        }
    }
    
draw_set_colour(c_teal);

if (draw_mouseline = 1)
    {
    draw_set_alpha(0.2);
    draw_line(mouse_x,136,mouse_x,136+tlh);
    draw_line(mouse_x,tls,mouse_x,lbsh+136);
    draw_mouseline = 0;
    }
if (draw_cursorline = 1)
    {
    draw_set_alpha(0.3);
    floatingcursorxcorrected = (floatingcursorx-tlx)/tlzoom*tlw;
    draw_line(floatingcursorxcorrected,floatingcursory,floatingcursorxcorrected,floatingcursory+48);
    }
    
draw_set_alpha(1);
if (largepreview)
    {
    draw_set_colour(c_black);
    draw_rectangle(89,49,691,651,0);
    draw_set_color(c_white);
    
    if (viewmode != 0)
        draw_surface_part(frame3d_surf_large,0,0,600,600,90,50);
        
    if (viewmode != 1)
        draw_surface_part(frame_surf_large,0,0,600,600,90,50);
    }
else
    {
    if (viewmode != 0)
        draw_surface_part(frame3d_surf,0,0,509,135,0,0);
        
    if (viewmode != 1)
        draw_surface_part(frame_surf,0,0,509,135,0,0);
    }
    
//menu
draw_set_alpha(1);
draw_set_colour(c_black);
draw_text(0,view_yview[3]+4,menu_string);
if (mouse_y &gt; view_yview[3])   
    {
    draw_set_colour(c_teal);
    if (mouse_x &gt; menu_width_start[0]) and (mouse_x &lt; menu_width_start[1])
        {
        draw_rectangle(menu_width_start[0],view_yview[3]+1,menu_width_start[1],view_yview[3]+20,1);
        draw_set_alpha(0.3);
        draw_rectangle(menu_width_start[0],view_yview[3]+1,menu_width_start[1],view_yview[3]+20,0);
        }
    else if (mouse_x &gt; menu_width_start[1]) and (mouse_x &lt; menu_width_start[2])
        {
        draw_rectangle(menu_width_start[1],view_yview[3]+1,menu_width_start[2],view_yview[3]+20,1);
        draw_set_alpha(0.3);
        draw_rectangle(menu_width_start[1],view_yview[3]+1,menu_width_start[2],view_yview[3]+20,0);
        }
    else if (mouse_x &gt; menu_width_start[2]) and (mouse_x &lt; menu_width_start[3])
        {
        draw_rectangle(menu_width_start[2],view_yview[3]+1,menu_width_start[3],view_yview[3]+20,1);
        draw_set_alpha(0.3);
        draw_rectangle(menu_width_start[2],view_yview[3]+1,menu_width_start[3],view_yview[3]+20,0);
        }
    else if (mouse_x &gt; menu_width_start[3]) and (mouse_x &lt; menu_width_start[4])
        {
        draw_rectangle(menu_width_start[3],view_yview[3]+1,menu_width_start[4],view_yview[3]+20,1);
        draw_set_alpha(0.3);
        draw_rectangle(menu_width_start[3],view_yview[3]+1,menu_width_start[4],view_yview[3]+20,0);
        }
    else if (mouse_x &gt; menu_width_start[4]) and (mouse_x &lt; menu_width_start[5])
        {
        draw_rectangle(menu_width_start[4],view_yview[3]+1,menu_width_start[5],view_yview[3]+20,1);
        draw_set_alpha(0.3);
        draw_rectangle(menu_width_start[4],view_yview[3]+1,menu_width_start[5],view_yview[3]+20,0);
        }
    else if (mouse_x &gt; menu_width_start[5]) and (mouse_x &lt; menu_width_start[6])
        {
        draw_rectangle(menu_width_start[5],view_yview[3]+1,menu_width_start[6],view_yview[3]+20,1);
        draw_set_alpha(0.3);
        draw_rectangle(menu_width_start[5],view_yview[3]+1,menu_width_start[6],view_yview[3]+20,0);
        }
    else if (mouse_x &gt; menu_width_start[6]) and (mouse_x &lt; menu_width_start[7])
        {
        draw_rectangle(menu_width_start[6],view_yview[3]+1,menu_width_start[7],view_yview[3]+20,1);
        draw_set_alpha(0.3);
        draw_rectangle(menu_width_start[6],view_yview[3]+1,menu_width_start[7],view_yview[3]+20,0);
        }
    draw_set_alpha(1);
    }
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
