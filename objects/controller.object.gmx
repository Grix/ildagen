<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>version = "0.9.4";

instance_create(0,0,obj_message);

if (os_version != -1) update_check();

c_ltltgray = make_colour_rgb(230,230,230);
c_ltltltgray = make_colour_rgb(240,240,240);

display_reset(0,1);

el_list = ds_list_create();
undo_list = ds_stack_create();
el_id = 0;
surf_list = ds_list_create();
surf3d_list = ds_list_create();
frame_list = ds_list_create();
ds_list_add(frame_list,el_list);
free_list = ds_list_create();
bez_list = ds_list_create();

redraw = 0;
sgridshow = 0;
rgridshow = 0;
sgriddouble = 0;
rgriddouble = 0;

mouse_yprevious = mouse_y;
mouse_xprevious = mouse_x;

instance_create(mouse_x,mouse_y,obj_cursor);

tooltip = "";
bckimage = 0;
onion = 0;
scroll = 0;
viewmode = 0;
selectedelement = -1;

placing = "line";
startpos[1] = 0;
placing_status = 0;
wave_amp = 10000;
wave_period = 1;
pointx[20] = 0;
pointy[20] = 0;
wave_offset = 0;
bez_moving = 0;

resolution = 256*2;
framepoints = 0;


colormode = "solid";
colormode2 = 0;
color1 = c_white;
color2 = c_white;
enddotscolor = c_red;
color_period = 8192;
color_freq = 0.5;
color_dc = 0.5;
color_offset = 0;

blankmode = "solid";
blankmode2 = 0;
blank_period = 8192;
blank_dc = 0.5;
blank_freq = 4;
enddots = 0;
makedot = 0;
dotmultiply = 2;
blank_offset = 0;

anienable = 0;
frame = 0;
framehr = 0;
fillframes = 1;
maxframes = 1;
anicolor1 = c_white;
anicolor2 = c_white;
anienddotscolor = c_red;
anicolor_dc = 0.5;
aniblank_dc = 0.5;
aniblank_offset = 0;
anicolor_offset = 0;
aniwave_offset = 0;
anifunc = "saw";
anixtrans = 0;
aniytrans = 0;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sgriddouble = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rgriddouble = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scroll = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_list_size(el_list) &gt; 0) and (placing_status == 0)
    {
    if (keyboard_check(vk_alt))
        {
        obj_cursor.x = ds_list_find_value(ds_list_find_value(el_list,ds_list_size(el_list)-1),2)/128;
        obj_cursor.y = ds_list_find_value(ds_list_find_value(el_list,ds_list_size(el_list)-1),3)/128;
        }
    if (keyboard_check(vk_control) and keyboard_check(vk_alt))
        {
        obj_cursor.x = ds_list_find_value(ds_list_find_value(el_list,ds_list_size(el_list)-1),0)/128;
        obj_cursor.y = ds_list_find_value(ds_list_find_value(el_list,ds_list_size(el_list)-1),1)/128;
        }
    }
    
if (keyboard_check(ord('S'))) or (sgridshow == 1)
    with (obj_cursor)
        move_snap(32,32);
        
if (keyboard_check_pressed(vk_backspace))
    {
    placing_status = 0;
    ds_list_clear(free_list);
    ds_list_clear(bez_list);
    exit;
    }
        
if (keyboard_check_pressed(ord('N')))
    window_set_size(window_get_width(),window_get_width()/room_width*room_height);
        
if (keyboard_check_pressed(ord('M')))
    window_set_size(room_width,room_height);
    
if (keyboard_check_pressed(vk_space))
    {
    viewmode++;
    if (viewmode &gt; 2)
        viewmode = 0;
    refresh_surfaces();
    }
    
if (!ds_list_empty(el_list) and !surface_exists(ds_list_find_value(surf_list,0)))
    refresh_surfaces();

if (keyboard_check(vk_left)) and (maxframes &gt; 1)
    {
    if (keyboard_check_pressed(vk_left))
        {
        frame--;
        framehr--;
        scroll = 0;
        alarm[0] = 30;
        }
    else if (scroll)
        framehr -= 0.4;
    if (framehr &lt; -0.5)
        framehr+= maxframes;
    frame = round(framehr);
    if (frame &lt; 1)
        frame = 0;
    refresh_surfaces();
    }
else if (keyboard_check(vk_right)) and (maxframes &gt; 1)
    {
    if (keyboard_check_pressed(vk_right))
        {
        frame++;
        framehr++;
        scroll = 0;
        alarm[0] = 30;
        }
    else if (scroll)
        framehr += 0.4;
    if (framehr &gt; maxframes-1)
        framehr-= maxframes;
    frame = round(framehr);
    if (frame &lt; 1)
        frame = 0;
    refresh_surfaces();
    }
    
if (keyboard_check_pressed(vk_up)) and (!ds_list_empty(el_list))
    {
    tempstop = 0;
    while (1)
        {
        selectedelement++;
        for (i = 0; i &lt; ds_list_size(el_list);i++)
            {
            if (selectedelement = ds_list_find_value(ds_list_find_value(el_list,i),9))
                tempstop = 1;
            }
        if (tempstop)
            exit;
        
        if (selectedelement &gt; el_id)
            {
            selectedelement = -1;
            exit;
            }
        }
    }
if (keyboard_check_pressed(vk_down)) and (!ds_list_empty(el_list))
    {
    tempstop = 0;
    while (1)
        {
        selectedelement--;
        for (i = 0; i &lt; ds_list_size(el_list);i++)
            {
            if (selectedelement = ds_list_find_value(ds_list_find_value(el_list,i),9))
                tempstop = 1;
            }
        if (tempstop)
            exit;
        
        if (selectedelement &lt; 0)
            {
            selectedelement = -1;
            exit;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((mouse_x &gt; 550) or (mouse_y &gt; 550)) and (placing_status != 2)
    {
    placing_status = 0;
    ds_list_clear(free_list);
    ds_list_clear(bez_list);
    exit;
    }

if (placing_status == 1)
    {
    if (placing != "curve")
        create_element();
    else
        {
        placing_status = 2;
        point1x = startpos[0]+cos(-mousedir-pi/2)*100;
        if (point1x &gt; 500) or (point1x &lt; 10)
            point1x = startpos[0]+cos(-mousedir+pi/2)*100;
        point1y = startpos[1]+sin(-mousedir-pi/2)*100;
        if (point1y &gt; 500) or (point1y &lt; 10)
            point1y = startpos[1]+sin(-mousedir+pi/2)*100;
        point2x = endx+cos(-mousedir-pi/2)*100;
        if (point2x &gt; 500) or (point2x &lt; 10)
            point2x = endx+cos(-mousedir+pi/2)*100;
        point2y = endy+sin(-mousedir-pi/2)*100;
        if (point2y &gt; 500) or (point2y &lt; 10)
            point2y = endy+sin(-mousedir+pi/2)*100;
        ds_list_replace(bez_list,2,point1x);
        ds_list_replace(bez_list,3,point1y);
        ds_list_replace(bez_list,4,point2x);
        ds_list_replace(bez_list,5,point2y);
        bezier_coeffs(ds_list_find_value(bez_list,0),ds_list_find_value(bez_list,1),ds_list_find_value(bez_list,2),ds_list_find_value(bez_list,3),ds_list_find_value(bez_list,4),ds_list_find_value(bez_list,5),ds_list_find_value(bez_list,6),ds_list_find_value(bez_list,7));
        }
    }
    
bez_moving = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((keyboard_check(ord('E'))) and (placing_status != 2))
    {
    ds_stack_push(undo_list,"bb"+string(color2));
    ds_stack_push(undo_list,"b"+string(color1));
    color1 = draw_getpixel(obj_cursor.x,obj_cursor.y);
    exit;
    }

if ((mouse_x &gt; 515) or (mouse_y &gt; 515)) and (placing_status != 2)
    {
    placing_status = 0;
    ds_list_clear(free_list);
    ds_list_clear(bez_list);
    exit;
    }


if (placing_status == 0)
    {
    placing_status = 1;
    startpos[0] = obj_cursor.x;
    startpos[1] = obj_cursor.y;
    if (placing == "free")
        {
        ds_list_add(free_list,0);
        ds_list_add(free_list,0);
        }
    else if (placing == "curve")
        {
        bezier_coeffs(0,0,0,0,0,0,0,0);
        ds_list_add(bez_list,startpos[0]);
        ds_list_add(bez_list,startpos[1]);
        ds_list_add(bez_list,startpos[1]);
        ds_list_add(bez_list,startpos[1]);
        ds_list_add(bez_list,startpos[1]);
        ds_list_add(bez_list,startpos[1]);
        ds_list_add(bez_list,startpos[1]);
        ds_list_add(bez_list,startpos[1]);
        }
    }
    
else if (placing_status == 2) and (placing == "curve")
    {
    if (point_distance(mouse_x,mouse_y,ds_list_find_value(bez_list,2),ds_list_find_value(bez_list,3)) &lt; 7)
        bez_moving = 1;
    else if (point_distance(mouse_x,mouse_y,ds_list_find_value(bez_list,4),ds_list_find_value(bez_list,5)) &lt; 7)
        bez_moving = 2;
    if (point_distance(mouse_x,mouse_y,ds_list_find_value(bez_list,0),ds_list_find_value(bez_list,1)) &lt; 7)
        bez_moving = 3;
    else if (point_distance(mouse_x,mouse_y,ds_list_find_value(bez_list,6),ds_list_find_value(bez_list,7)) &lt; 7)
        bez_moving = 4;
    mouse_yprevious = mouse_y;
    mouse_xprevious = mouse_x;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_x &gt; 512) or (mouse_y &gt; 512)
    exit;
    
if (placing == "free")
    {
    if (placing_status == 1)
        {
        if (point_distance(startpos[0]+ds_list_find_value(free_list,ds_list_size(free_list)-2),startpos[1]+ds_list_find_value(free_list,ds_list_size(free_list)-1),mouse_x,mouse_y) &gt;= resolution/128)
            {
            ds_list_add(free_list,mouse_x-startpos[0]);
            ds_list_add(free_list,mouse_y-startpos[1]);
            }
        }
    }
else if (placing == "curve")
    {
    if (placing_status == 1)
        {
        mousedir = degtorad(point_direction(startpos[0],startpos[1],endx,endy));
        ds_list_replace(bez_list,6,endx);
        ds_list_replace(bez_list,7,endy);
        bezier_coeffs(ds_list_find_value(bez_list,0),ds_list_find_value(bez_list,1),ds_list_find_value(bez_list,2),ds_list_find_value(bez_list,3),ds_list_find_value(bez_list,4),ds_list_find_value(bez_list,5),ds_list_find_value(bez_list,6),ds_list_find_value(bez_list,7));
        }
    else if (placing_status == 2)
        {
        if (bez_moving == 1)
            {
            ds_list_replace(bez_list,2,ds_list_find_value(bez_list,2)+mouse_x-mouse_xprevious);
            ds_list_replace(bez_list,3,ds_list_find_value(bez_list,3)+mouse_y-mouse_yprevious);
            mouse_yprevious = mouse_y;
            mouse_xprevious = mouse_x;
            }
        else if (bez_moving == 2)
            {
            ds_list_replace(bez_list,4,ds_list_find_value(bez_list,4)+mouse_x-mouse_xprevious);
            ds_list_replace(bez_list,5,ds_list_find_value(bez_list,5)+mouse_y-mouse_yprevious);
            mouse_yprevious = mouse_y;
            mouse_xprevious = mouse_x;
            }
        else if (bez_moving == 3)
            {
            ds_list_replace(bez_list,0,ds_list_find_value(bez_list,0)+mouse_x-mouse_xprevious);
            ds_list_replace(bez_list,1,ds_list_find_value(bez_list,1)+mouse_y-mouse_yprevious);
            startpos[0] = ds_list_find_value(bez_list,0);
            startpos[1] = ds_list_find_value(bez_list,1);
            mouse_yprevious = mouse_y;
            mouse_xprevious = mouse_x;
            }
        else if (bez_moving == 4)
            {
            ds_list_replace(bez_list,6,ds_list_find_value(bez_list,6)+mouse_x-mouse_xprevious);
            ds_list_replace(bez_list,7,ds_list_find_value(bez_list,7)+mouse_y-mouse_yprevious);
            endx = ds_list_find_value(bez_list,6);
            endy = ds_list_find_value(bez_list,7);
            mouse_yprevious = mouse_y;
            mouse_xprevious = mouse_x;
            }
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!updatecheckenabled)
    exit;
    
if ds_map_find_value(async_load, "id") == updateget
    {
    if ds_map_find_value(async_load, "status") == 0
       {
       versionnew = ds_map_find_value(async_load, "result");
       if (versionnew != version)
            {
            if (show_question("New version available: "+versionnew+"##Would you like to visit the download page?"))
                url_open("http://bitlasers.com/opencart/index.php?route=product/product&amp;path=67&amp;product_id=82");
            }
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_clear(c_black);

if (bckimage)
    {
    if (!keyboard_check(ord('E')) and (placing_status != 2))
        draw_set_alpha(0.3);
    draw_background_stretched(bck_bckimage,0,0,512,512);
    draw_set_alpha(1);
    }

if (keyboard_check(ord('A')))
    draw_guidelines();
    
if (keyboard_check(ord('S')) or (sgridshow == 1))
    {
    draw_grid();
    if  (keyboard_check_pressed(ord('S')))
        {
        if (sgriddouble == 1)
            sgridshow = !sgridshow;
        alarm[2] = 40;
        sgriddouble = 1;
        }
    }
    
if (keyboard_check(ord('R')) or (rgridshow == 1))
    {
    draw_radialgrid();
    if  (keyboard_check_pressed(ord('R')))
        {
        if (rgriddouble == 1)
            rgridshow = !rgridshow;
        alarm[1] = 40;
        rgriddouble = 1;
        }
    }
    
draw_set_color(c_white);
    draw_ilda_2d();
    
draw_set_color(c_green);
    
    for (i=0;i &lt; ds_list_size(el_list);i++)
        {
        if (ds_list_find_value(ds_list_find_value(el_list,i),9) == selectedelement)
            {
            draw_rectangle(ds_list_find_value(ds_list_find_value(el_list,i),0)/$ffff*512,ds_list_find_value(ds_list_find_value(el_list,i),1)/$ffff*512,ds_list_find_value(ds_list_find_value(el_list,i),2)/$ffff*512,ds_list_find_value(ds_list_find_value(el_list,i),3)/$ffff*512,1);
            }
        }

draw_set_color(c_gray);

if (placing_status)
    draw_preview_element();


draw_set_font(fnt_tooltip);
draw_set_color(c_white);
draw_rectangle_colour(513,0,1000,512,c_ltgray,c_ltgray,c_ltltgray,c_ltltgray,0);
draw_rectangle_colour(0,512,1000,670,c_ltltgray,c_ltltgray,c_ltltltgray,c_ltltltgray,0);
draw_set_color(c_dkgray);
draw_line(512,0,512,512);
draw_line(513,150,1000,150);
draw_line(513,302,1000,302);
draw_line(513,450,1000,450);
draw_line(0,512,1000,512);
draw_set_font(fnt_bold);
draw_set_color(c_dkgray);
draw_text(536,20,"Shape");
draw_text(536,166,"Color");
draw_text(536,319,"Blanking");
draw_text(20,524,"Animation");
draw_set_font(fnt_tooltip);
draw_set_color(c_ltgray);
draw_text(12,487,"Frame: "+string(frame+1)+"/"+string(maxframes));
draw_text(440,487,"Points: "+string(framepoints));


if (tooltip != "")
    {
    draw_text(5,5,tooltip);
    tooltip = "";
    }

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="48">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame = 0;
framehr = 0;
refresh_surfaces();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (placing == "curve") and (placing_status == 2)
    create_element();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
