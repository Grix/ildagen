<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_longcolorselect</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
moving = 0;

redy_upper = y+52-controller.red_scale*52;
greeny_upper = y+52-controller.green_scale*52;
bluey_upper = y+52-controller.blue_scale*52;

redy_lower = y+52-controller.red_scale_lower*52;
greeny_lower = y+52-controller.green_scale_lower*52;
bluey_lower = y+52-controller.blue_scale_lower*52;

redx = x;
greenx = x+16;
bluex = x+32;

xplus70 = x+70;
yplus16 = y+16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oDropDown))
    exit;

if (mouse_x &gt; bbox_left) and (mouse_x &lt; bbox_right) and (mouse_y &gt; bbox_top) and ((mouse_y &lt; bbox_bottom))
{
    controller.tooltip = "Changes the bounds of colors in output, use to adjust white balance and accuracy of gradients.#-&gt;Right click on a knob to enter precise values.";
} 

if (moving == 1) or ((moving &lt; 4) and (moving &gt; 0) and keyboard_check(vk_control))
{
    red = controller.red_scale * 255;
    red -= (mouse_y-mouse_yprevious)*255/52;
    red = clamp(red, (controller.red_scale_lower*255), 255);
    controller.red_scale = red/255;
}
if (moving == 2) or ((moving &lt; 4) and (moving &gt; 0) and keyboard_check(vk_control))
{
    green = controller.green_scale * 255;
    green -= (mouse_y-mouse_yprevious)*255/52;
    green = clamp(green, (controller.green_scale_lower*255), 255);
    controller.green_scale = green/255;
}
if (moving == 3) or ((moving &lt; 4) and (moving &gt; 0) and keyboard_check(vk_control))
{
    blue = controller.blue_scale * 255;
    blue -= (mouse_y-mouse_yprevious)*255/52;
    blue = clamp(blue, (controller.blue_scale_lower*255), 255);
    controller.blue_scale = blue/255;
}
if (moving == 4) or ((moving &gt; 3) and keyboard_check(vk_control))
{
    red = controller.red_scale_lower * 255;
    red -= (mouse_y-mouse_yprevious)*255/52;
    red = clamp(red, 0, (controller.red_scale*255));
    controller.red_scale_lower = red/255;
}
if (moving == 5) or ((moving &gt; 3) and keyboard_check(vk_control))
{
    green = controller.green_scale_lower * 255;
    green -= (mouse_y-mouse_yprevious)*255/52;
    green = clamp(green, 0, (controller.green_scale*255));
    controller.green_scale_lower = green/255;
}
if (moving == 6) or ((moving &gt; 3) and keyboard_check(vk_control))
{
    blue = controller.blue_scale_lower * 255;
    blue -= (mouse_y-mouse_yprevious)*255/52;
    blue = clamp(blue, 0, (controller.blue_scale*255));
    controller.blue_scale_lower = blue/255;
}
    
mouse_yprevious = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving)
{
    redy_upper = y+52-controller.red_scale*52;
    greeny_upper = y+52-controller.green_scale*52;
    bluey_upper = y+52-controller.blue_scale*52;
    
    redy_lower = y+52-controller.red_scale_lower*52;
    greeny_lower = y+52-controller.green_scale_lower*52;
    bluey_lower = y+52-controller.blue_scale_lower*52;
    
    save_profile();
}    


moving = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oDropDown))
    exit;

if (mouse_x &lt; (x+14))
{
    {
    if (mouse_y &lt; (redy_upper+12))
        ilda_dialog_num("red_scale","Enter value for RED UPPER from 0 to 100",controller.red_scale * 100);
    else
        ilda_dialog_num("red_scale_lower","Enter value for RED LOWER from 0 to 100",controller.red_scale_lower * 100);
    }
}
else if (mouse_x &gt; (x+30))
{
    {
    if (mouse_y &lt; (bluey_upper+12))
        ilda_dialog_num("blue_scale","Enter value for BLUE UPPER from 0 to 100",controller.blue_scale * 100);
    else
        ilda_dialog_num("blue_scale_lower","Enter value for BLUE LOWER from 0 to 100",controller.blue_scale_lower * 100);
    }
}
else 
{
    {
    if (mouse_y &lt; (greeny_upper+12))
        ilda_dialog_num("green_scale","Enter value for GREEN UPPER from 0 to 100",controller.green_scale * 100);
    else
        ilda_dialog_num("green_scale_lower","Enter value for GREEN LOWER from 0 to 100",controller.green_scale_lower * 100);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oDropDown))
    exit;

if (mouse_x &lt; (x+14))
{
    if (mouse_y &lt; (redy_upper+12))
        moving = 1;   
    else
        moving = 4;
}
else if (mouse_x &gt; (x+30))
{
    if (mouse_y &lt; (bluey_upper+12))
        moving = 3;   
    else
        moving = 6;
}
else 
{
    if (mouse_y &lt; (greeny_upper+12))
        moving = 2;   
    else
        moving = 5;
}

mouse_yprevious = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self();
if (moving)
{
    redy_upper = y+52-controller.red_scale*52;
    greeny_upper = y+52-controller.green_scale*52;
    bluey_upper = y+52-controller.blue_scale*52;
    
    redy_lower = y+52-controller.red_scale_lower*52;
    greeny_lower = y+52-controller.green_scale_lower*52;
    bluey_lower = y+52-controller.blue_scale_lower*52;
}
draw_sprite(spr_colorselect_red,(moving == 4),redx,redy_lower);
draw_sprite(spr_colorselect_green,(moving == 5),greenx,greeny_lower);
draw_sprite(spr_colorselect_blue,(moving == 6),bluex,bluey_lower);
draw_sprite(spr_colorselect_red,(moving == 1),redx,redy_upper);
draw_sprite(spr_colorselect_green,(moving == 2),greenx,greeny_upper);
draw_sprite(spr_colorselect_blue,(moving == 3),bluex,bluey_upper);

draw_set_colour(c_dkgray);
draw_text(x+60,y+25,"Color range");

draw_rectangle(redx+7,y+2,redx+9,redy_upper+1,0);
draw_rectangle(redx+7,redy_lower+9,redx+9,y+60,0);
draw_rectangle(greenx+7,y+2,greenx+9,greeny_upper+1,0);
draw_rectangle(greenx+7,greeny_lower+9,greenx+9,y+60,0);
draw_rectangle(bluex+7,y+2,bluex+9,bluey_upper+1,0);
draw_rectangle(bluex+7,bluey_lower+9,bluex+9,y+60,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
