<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_resettrans</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_button_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oDropDown))
    exit;
    
if (mouse_x &gt; bbox_left) and (mouse_x &lt; bbox_right) and (mouse_y &gt; bbox_top) and ((mouse_y &lt; bbox_bottom))
    image_index = 1;
else 
    image_index = 0;

if (mouse_x &gt; bbox_left) and (mouse_x &lt; bbox_right) and (mouse_y &gt; bbox_top) and ((mouse_y &lt; bbox_bottom))
    controller.tooltip = "Resets displacement animation, makes the object stand still";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(oDropDown))
    exit;
with (controller)
    {
    for (c = 0; c &lt; ds_list_size(semaster_list); c++)
        {
        selectedelement = ds_list_find_value(semaster_list,c);
        
        //find elements
        temp_undof_list = ds_list_create();
        temp_frame_list = ds_list_create();
        for (i = scope_start;i &lt;= scope_end;i++)
            {
            el_list_temp = ds_list_find_value(frame_list,i);
            for (u = 0;u &lt; ds_list_size(el_list_temp);u++)
                {
                if (ds_list_find_value(ds_list_find_value(el_list_temp,u),9) == selectedelement)
                    {
                    if (ds_list_empty(temp_frame_list))
                        startframe = i;
                    ds_list_add(temp_frame_list,ds_list_find_value(el_list_temp,u))
                    temp_undo_list = ds_list_create();
                    ds_list_copy(temp_undo_list,ds_list_find_value(el_list_temp,u));
                    ds_list_add(temp_undo_list,i);
                    ds_list_add(temp_undof_list,temp_undo_list);
                    }
                }
            }
        ds_list_add(undo_list,"k"+string(temp_undof_list));
        
        for (i = 0;i &lt; ds_list_size(temp_frame_list);i++)
            {
            new_list = ds_list_find_value(temp_frame_list,i);
            
            if (i == 0)
                {
                startposx_r = ds_list_find_value(new_list,0);
                startposy_r = ds_list_find_value(new_list,1);
                endx_r = ds_list_find_value(new_list,2);
                endy_r = ds_list_find_value(new_list,3);
                }
            else if (controller.reap_trans)
                {
                ds_list_replace(new_list,0,startposx_r);
                ds_list_replace(new_list,1,startposy_r);
                ds_list_replace(new_list,2,endx_r);
                ds_list_replace(new_list,3,endy_r);
                }
            }
            
        
        for (i = 0; i &lt; ds_list_size(el_list);i++)
            {
            if (selectedelement = ds_list_find_value(ds_list_find_value(el_list,i),9))
                {
                sefound = 1;
                selectedelementlist = ds_list_find_value(el_list,i);
                xo = ds_list_find_value(selectedelementlist,0)/$ffff*512;
                yo = ds_list_find_value(selectedelementlist,1)/$ffff*512;
                rectxmin = round(xo + (ds_list_find_value(selectedelementlist,4)));
                rectymin = round(yo + (ds_list_find_value(selectedelementlist,6)));
                rectxmax = round(xo + (ds_list_find_value(selectedelementlist,5)));
                rectymax = round(yo + (ds_list_find_value(selectedelementlist,7)));
                }
            }
        }
        
    frame_surf_refresh = 1;
    update_semasterlist_flag = 1;
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
