<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_laserareasettings</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moving = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controller.scrollcursor_flag = 0;

if (moving == 1)
{
    //x start
    controller.scrollcursor_flag = 1;
    controller.x_scale_start += ((mouse_x-mousexprevious)*$ffff/256);
    if (controller.x_scale_start &lt; 0)
        controller.x_scale_start = 0;
    mousexprevious = mouse_x;
    mouseyprevious = mouse_y;
    if (mouse_check_button_released(mb_left))
    {
        save_settings();
        moving = 0;
    }
}
else if (moving == 2)
{
    //x end
    controller.scrollcursor_flag = 1;
    controller.x_scale_end += ((mouse_x-mousexprevious)*$ffff/256);
    if (controller.x_scale_end &gt; $FFFF)
        controller.x_scale_end = $FFFF;
    mousexprevious = mouse_x;
    mouseyprevious = mouse_y;
    if (mouse_check_button_released(mb_left))
    {
        save_settings();
        moving = 0;
    }
}
else if (moving == 3)
{
    //y start
    controller.scrollcursor_flag = 2;
    controller.y_scale_start += ((mouse_y-mouseyprevious)*$ffff/256);
    if (controller.y_scale_start &lt; 0)
        controller.y_scale_start = 0;
    mousexprevious = mouse_x;
    mouseyprevious = mouse_y;
    if (mouse_check_button_released(mb_left))
    {
        save_settings();
        moving = 0;
    }
}
else if (moving == 4)
{
    //y end
    controller.scrollcursor_flag = 2;
    controller.y_scale_end += ((mouse_y-mouseyprevious)*$ffff/256);
    if (controller.y_scale_end &gt; $FFFF)
        controller.y_scale_end = $FFFF;
    mousexprevious = mouse_x;
    mouseyprevious = mouse_y;
    if (mouse_check_button_released(mb_left))
    {
        save_settings();
        moving = 0;
    }
}
else if (moving == 5)
{
    //drag whole window
    controller.y_scale_end += ((mouse_y-mouseyprevious)*$ffff/256);
    controller.y_scale_start += ((mouse_y-mouseyprevious)*$ffff/256);
    controller.x_scale_end += ((mouse_x-mousexprevious)*$ffff/256);
    controller.x_scale_start += ((mouse_x-mousexprevious)*$ffff/256);
    if (controller.x_scale_start &lt; 0)
        controller.x_scale_start = 0;
    if (controller.x_scale_end &gt; $FFFF)
        controller.x_scale_end = $FFFF;
    if (controller.y_scale_start &lt; 0)
        controller.y_scale_start = 0;
    if (controller.y_scale_end &gt; $FFFF)
        controller.y_scale_end = $FFFF;
    mousexprevious = mouse_x;
    mouseyprevious = mouse_y;
    if (mouse_check_button_released(mb_left))
    {
        save_settings();
        moving = 0;
    }
}

else
{
    if ((mouse_x &gt; (x+controller.x_scale_start/$FFFF*256)) &amp;&amp;
        (mouse_y &gt; (y+controller.y_scale_start/$FFFF*256)) &amp;&amp; 
        (mouse_x &lt; (x+controller.x_scale_end/$FFFF*256)) &amp;&amp;
        (mouse_y &lt; (y+controller.y_scale_end/$FFFF*256)) )
    {
        //within projector size
        if (mouse_x &lt; (x+controller.x_scale_start/$FFFF*256+6))
        {   
            controller.scrollcursor_flag = 1;
            controller.tooltip = "Drag side to resize projection window";
            if (mouse_check_button_pressed(mb_left))
            {
                mousexprevious = mouse_x;
                mouseyprevious = mouse_y;
                moving = 1;
                exit;
            }
        }
        else if (mouse_x &gt; (x+controller.x_scale_end/$FFFF*256-6))
        {   
            controller.scrollcursor_flag = 1;
            controller.tooltip = "Drag side to resize projection window";
            if (mouse_check_button_pressed(mb_left))
            {
                mousexprevious = mouse_x;
                mouseyprevious = mouse_y;
                moving = 2;
                exit;
            }
        }
        else if (mouse_y &lt; (y+controller.y_scale_start/$FFFF*256+6))
        {   
            controller.scrollcursor_flag = 2;
            controller.tooltip = "Drag side to resize projection window";
            if (mouse_check_button_pressed(mb_left))
            {
                mousexprevious = mouse_x;
                mouseyprevious = mouse_y;
                moving = 3;
                exit;
            }
        }
        else if (mouse_y &gt; (y+controller.y_scale_end/$FFFF*256-6))
        {   
            controller.scrollcursor_flag = 2;
            controller.tooltip = "Drag side to resize projection window";
            if (mouse_check_button_pressed(mb_left))
            {
                mousexprevious = mouse_x;
                mouseyprevious = mouse_y;
                moving = 4;
                exit;
            }
        }
        else
        {
            controller.tooltip = "Drag to move projection window.";
            if (mouse_check_button_pressed(mb_left))
            {
                mousexprevious = mouse_x;
                mouseyprevious = mouse_y;
                moving = 5;
                exit;
            }
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_colour(c_aqua);
draw_set_alpha(0.1);
draw_rectangle( x+controller.x_scale_start/$FFFF*256+1,
                y+controller.y_scale_start/$FFFF*256+1,
                x+controller.x_scale_end/$FFFF*256-1,
                y+controller.y_scale_end/$FFFF*256-1,     0);
draw_set_alpha(1);
draw_rectangle( x+controller.x_scale_start/$FFFF*256+1,
                y+controller.y_scale_start/$FFFF*256+1,
                x+controller.x_scale_end/$FFFF*256-1,
                y+controller.y_scale_end/$FFFF*256-1,     1);
draw_rectangle( x+controller.x_scale_start/$FFFF*256,
                y+controller.y_scale_start/$FFFF*256,
                x+controller.x_scale_end/$FFFF*256,
                y+controller.y_scale_end/$FFFF*256,     1);

draw_set_colour(c_maroon);
var t_list = controller.blindzone_list;
for (i = 0; i &lt; ds_list_size(controller.blindzone_list); i+=4)
{    
    draw_set_alpha(0.2);
    draw_rectangle( x+t_list[| i]/$FFFF*256+1,
                    y+t_list[| i+2]/$FFFF*256+1,
                    x+t_list[| i+1]/$FFFF*256-1,
                    y+t_list[| i+3]/$FFFF*256-1,     1);
    draw_set_alpha(1);
    draw_rectangle( x+t_list[| i]/$FFFF*256+1,
                    y+t_list[| i+2]/$FFFF*256+1,
                    x+t_list[| i+1]/$FFFF*256-1,
                    y+t_list[| i+3]/$FFFF*256-1,     1);
    draw_rectangle( x+t_list[| i]/$FFFF*256,
                    y+t_list[| i+2]/$FFFF*256,
                    x+t_list[| i+1]/$FFFF*256,
                    y+t_list[| i+3]/$FFFF*256,     1);

}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
