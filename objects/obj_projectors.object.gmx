<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>list_width = 250;
list_height = 100;
scrollx = 0;
scrollw = 32;
scrollh = 32;
itemh = 24;
moving = 0;

surf_projectorlist = -1;

itempos_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moving == 1)
{
    scrollx += (mouse_y-mouseyprev)*scrollh/list_height;
    scrollx = clamp(scrollx,0,scrollh-scrollw);
    mouseyprev = mouse_y;
    controller.tooltip = "Drag to scroll the list of projectors.";
    if (!mouse_check_button(mb_left))
    {
        moving = 0;
    }
    exit;
}

if (instance_exists(oDropDown))
    exit;
    
if (scrollh &gt; list_height)
&amp;&amp; (mouse_y == clamp(mouse_y, y+(scrollx)/(scrollh-scrollw)*(list_height-scrollw), y+(scrollx)/(scrollh-scrollw)*(list_height-scrollw)+scrollw)) 
&amp;&amp; (mouse_x == clamp(mouse_x, x+list_width, x+list_width+20))
{
    controller.tooltip = "Drag to scroll the list of projectors.";
    if (mouse_check_button_pressed(mb_left))
    {
        moving = 1;
        mouseyprev = mouse_y;
    }
    else if (mouse_wheel_up())
    {
        scrollx -= itemh;
        scrollx = clamp(scrollx,0,scrollh-scrollw);
    }
    else if (mouse_wheel_down())
    {
        scrollx += itemh;
        scrollx = clamp(scrollx,0,scrollh-scrollw);
    }
}
else if (mouse_y == clamp(mouse_y, y, y+list_height)) 
    &amp;&amp;  (mouse_x == clamp(mouse_x, x, x+list_width))
{
    if (mouse_wheel_up())
    {
        scrollx -= itemh;
        scrollx = clamp(scrollx,0,scrollh-scrollw);
    }
    else if (mouse_wheel_down())
    {
        scrollx += itemh;
        scrollx = clamp(scrollx,0,scrollh-scrollw);
    }
    
    var t_dac_mouseover = (scrollx + (mouse_y - y)) div itemh;
    if (t_dac_mouseover &lt; ds_list_size(seqcontrol.projector_list))
    {
        //todo find actual thing mouse is over
        controller.tooltip = "Right click projector for options.";
        if (mouse_check_button_pressed(mb_right))
        {
            //dropdown
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf_projectorlist))
    surface_free(surf_projectorlist);
    
ds_list_destroy(itempos_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
if (scrollh &gt; list_height)
{
    draw_set_colour(c_white);
    draw_rectangle(x+list_width,y,x+list_width+20,y+list_height,0);
    draw_set_colour(c_dkgray);
    draw_rectangle(x+list_width, y+(scrollx)/(scrollh-scrollw)*(list_height-scrollw), x+list_width+20, y+(scrollx)/(scrollh-scrollw)*(list_height-scrollw)+scrollw, 0);
    draw_rectangle(x+list_width,y,x+list_width+20,y+list_height,1);
}
else
{
    scrollx = 0;
    draw_set_colour(c_dkgray);
}
draw_rectangle(x,y,x+list_width,y+list_height,1);

var t_plist = seqcontrol.projector_list;

if (!surface_exists(surf_projectorlist))
{
    ds_list_clear(itempos_list);
    var t_ypos = 0;
    surf_projectorlist = surface_create(512,512);
    surface_set_target(surf_projectorlist);
        draw_clear_alpha(c_white,0);
        draw_enable_alphablend(false);
        draw_set_colour(c_black);
        draw_set_valign(fa_middle);
        for (i = 0; i &lt; ds_list_size(t_plist); i++)
        {
            var t_thisplist = t_plist[| i];
            ds_list_add(itempos_list, t_ypos);
            /*if (ds_list_find_index(t_plist,controller.dac) == i) &amp;&amp; false
            {
                draw_set_color(controller.c_gold);
                draw_set_alpha(0.4);
                draw_enable_alphablend(true);
                draw_rectangle(0,t_ypos+1,list_width,t_ypos+itemh,0);
                draw_enable_alphablend(false);
                draw_set_alpha(1);
                draw_set_colour(c_black);
                draw_sprite(spr_checkbox,1,5,t_ypos+4);
                draw_text(35, t_ypos+itemh/2, ds_list_find_value(t_plist[| i], 1));
            }
            else*/
            
            var t_text = t_thisplist[| 1] + "   [Profile: "+t_thisplist[| 3] +"]";
            draw_text(10, t_ypos+itemh/2, t_text);
            
            t_ypos += itemh;
            draw_line(0, t_ypos, list_width, t_ypos);
            
            var t_daclist = t_thisplist[| 4];
            for (j = 0; j &lt; ds_list_size(t_daclist); j++)
            {   
                var t_thisdaclist = t_daclist[| j];
                t_text = "-   " + t_thisdaclist[| 1];
                if (t_thisdaclist[| 2])
                    t_text += " [X invert]";
                if (t_thisdaclist[| 3])
                    t_text += " [Y invert]";
                draw_text(20, t_ypos+itemh/2, t_text);
                t_ypos += itemh;
                draw_line(0, t_ypos, list_width, t_ypos);
            }
            if (ds_list_size(t_daclist) == 0)
            {
                draw_set_colour(c_maroon);
                draw_text(20, t_ypos+itemh/2, "-   [No DACs added]");
                draw_set_colour(c_black);
                t_ypos += itemh;
                draw_line(0, t_ypos, list_width, t_ypos);
            }
        }
        draw_set_valign(fa_top);
        draw_enable_alphablend(true);
    surface_reset_target();
    scrollh = t_ypos;
}

draw_surface_part(surf_projectorlist, 0, round(scrollx), list_width, list_height, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
