<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_e_undo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_x &gt; x) and (mouse_x &lt; (x+sprite_width)) and (mouse_y &gt; y) and ((mouse_y &lt; y+sprite_height))
    {
    image_index = 1;
    controller.tooltip = "Undoes last action";
    } 
else image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_stack_size(controller.undo_list) == 0)
    exit;
    
with (controller)
    {
    placing_status = 0;
    ds_list_clear(free_list);
    ds_list_clear(bez_list);
    }

undo = ds_stack_pop(controller.undo_list);

if (is_real(undo))
    {
    for (j = 0;j &lt; ds_list_size(controller.frame_list);j++)
        {
        el_list = ds_list_find_value(controller.frame_list,j);
        for (i = 0;i &lt; ds_list_size(el_list);i++)
            {
            if (ds_list_find_value(ds_list_find_value(el_list,i),9) == undo)
                {
                list_id = ds_list_find_value(el_list,i);
                ds_list_clear(list_id);
                ds_list_delete(el_list,i);
                }
            }
        }
    }
else if (string_char_at(undo,0) == 'a')
    {
    controller.maxframes = real(string_digits(undo));
    if (controller.frame &gt; controller.maxframes) controller.frame = controller.maxframes-1;
    with (controller) refresh_surfaces();
    }
else if (string_char_at(undo,0) == 'r')
    {
    controller.resolution = real(string_digits(undo));
    }
else if (string_char_at(undo,0) == 'd')
    {
    controller.dotmultiply = real(string_digits(undo));
    }
else if (string_char_at(undo,0) == 'c')
    {
    ds_list_copy(ds_list_find_index(controller.frame_list,real(string_digits(ds_stack_pop(controller.undo_list)))),real(string_digits(undo)));
    }
else if (string_char_at(undo,0) == 'v')
    {
    controller.anicolor1 = real(string_digits(undo));
    controller.anicolor2 = real(string_digits(ds_stack_pop(controller.undo_list)));
    }
else if (string_char_at(undo,0) == 'b')
    {
    controller.color1 = real(string_digits(undo));
    controller.color2 = real(string_digits(ds_stack_pop(controller.undo_list)));
    }
    
    
with (controller)
    {
    refresh_surfaces();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_index,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!keyboard_check(vk_control))
exit;

if (ds_stack_size(controller.undo_list) == 0)
    exit;

undo = ds_stack_pop(controller.undo_list);

if (is_real(undo))
    {
    for (j = 0;j &lt; ds_list_size(controller.frame_list);j++)
        {
        el_list = ds_list_find_value(controller.frame_list,j);
        for (i = 0;i &lt; ds_list_size(el_list);i++)
            {
            if (ds_list_find_value(ds_list_find_value(el_list,i),9) == undo)
                {
                list_id = ds_list_find_value(el_list,i);
                ds_list_clear(list_id);
                ds_list_delete(el_list,i);
                }
            }
        }
    }
else if (string_char_at(undo,0) == 'a')
    {
    controller.maxframes = real(string_digits(undo));
    if (controller.frame &gt; controller.maxframes) controller.frame = controller.maxframes-1;
    }
else if (string_char_at(undo,0) == 'r')
    {
    controller.resolution = real(string_digits(undo));
    }
else if (string_char_at(undo,0) == 'd')
    {
    controller.dotmultiply = real(string_digits(undo));
    }
else if (string_char_at(undo,0) == 'c')
    {
    ds_list_copy(ds_list_find_index(controller.frame_list,
                                    real(string_digits(ds_stack_pop(controller.undo_list)))),
                real(string_digits(undo)));
    }
else if (string_char_at(undo,0) == 'v')
    {
    controller.anicolor1 = real(string_digits(undo));
    controller.anicolor2 = real(string_digits(ds_stack_pop(controller.undo_list)));
    }
else if (string_char_at(undo,0) == 'b')
    {
    controller.color1 = real(string_digits(undo));
    controller.color2 = real(string_digits(ds_stack_pop(controller.undo_list)));
    }
    
    
with (controller)
    {
    refresh_surfaces();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
